/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package irestads.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import irestads.model.Lop;
import irestads.model.LopModel;
import irestads.model.LopSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Lop service. Represents a row in the &quot;testprimeface_Lop&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link irestads.model.LopModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LopImpl}.
 * </p>
 *
 * @author ADMIN
 * @see LopImpl
 * @see irestads.model.Lop
 * @see irestads.model.LopModel
 * @generated
 */
@JSON(strict = true)
public class LopModelImpl extends BaseModelImpl<Lop> implements LopModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lop model instance should use the {@link irestads.model.Lop} interface instead.
	 */
	public static final String TABLE_NAME = "testprimeface_Lop";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lopId", Types.BIGINT },
			{ "tenLop", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table testprimeface_Lop (lopId LONG not null primary key,tenLop VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table testprimeface_Lop";
	public static final String ORDER_BY_JPQL = " ORDER BY lop.lopId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY testprimeface_Lop.lopId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.irestads.model.Lop"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.irestads.model.Lop"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Lop toModel(LopSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Lop model = new LopImpl();

		model.setLopId(soapModel.getLopId());
		model.setTenLop(soapModel.getTenLop());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Lop> toModels(LopSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Lop> models = new ArrayList<Lop>(soapModels.length);

		for (LopSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.irestads.model.Lop"));

	public LopModelImpl() {
	}

	public long getPrimaryKey() {
		return _lopId;
	}

	public void setPrimaryKey(long primaryKey) {
		setLopId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_lopId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Lop.class;
	}

	public String getModelClassName() {
		return Lop.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lopId", getLopId());
		attributes.put("tenLop", getTenLop());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lopId = (Long)attributes.get("lopId");

		if (lopId != null) {
			setLopId(lopId);
		}

		String tenLop = (String)attributes.get("tenLop");

		if (tenLop != null) {
			setTenLop(tenLop);
		}
	}

	@JSON
	public long getLopId() {
		return _lopId;
	}

	public void setLopId(long lopId) {
		_lopId = lopId;
	}

	@JSON
	public String getTenLop() {
		if (_tenLop == null) {
			return StringPool.BLANK;
		}
		else {
			return _tenLop;
		}
	}

	public void setTenLop(String tenLop) {
		_tenLop = tenLop;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Lop.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Lop toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Lop)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LopImpl lopImpl = new LopImpl();

		lopImpl.setLopId(getLopId());
		lopImpl.setTenLop(getTenLop());

		lopImpl.resetOriginalValues();

		return lopImpl;
	}

	public int compareTo(Lop lop) {
		int value = 0;

		if (getLopId() < lop.getLopId()) {
			value = -1;
		}
		else if (getLopId() > lop.getLopId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Lop lop = null;

		try {
			lop = (Lop)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = lop.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Lop> toCacheModel() {
		LopCacheModel lopCacheModel = new LopCacheModel();

		lopCacheModel.lopId = getLopId();

		lopCacheModel.tenLop = getTenLop();

		String tenLop = lopCacheModel.tenLop;

		if ((tenLop != null) && (tenLop.length() == 0)) {
			lopCacheModel.tenLop = null;
		}

		return lopCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{lopId=");
		sb.append(getLopId());
		sb.append(", tenLop=");
		sb.append(getTenLop());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("irestads.model.Lop");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lopId</column-name><column-value><![CDATA[");
		sb.append(getLopId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tenLop</column-name><column-value><![CDATA[");
		sb.append(getTenLop());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Lop.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Lop.class
		};
	private long _lopId;
	private String _tenLop;
	private Lop _escapedModelProxy;
}