/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package iRestads.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import iRestads.model.Dish;
import iRestads.model.DishModel;
import iRestads.model.DishSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Dish service. Represents a row in the &quot;dishstore_Dish&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link iRestads.model.DishModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DishImpl}.
 * </p>
 *
 * @author Be
 * @see DishImpl
 * @see iRestads.model.Dish
 * @see iRestads.model.DishModel
 * @generated
 */
@JSON(strict = true)
public class DishModelImpl extends BaseModelImpl<Dish> implements DishModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dish model instance should use the {@link iRestads.model.Dish} interface instead.
	 */
	public static final String TABLE_NAME = "dishstore_Dish";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dishId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dishName", Types.VARCHAR },
			{ "decription", Types.VARCHAR },
			{ "avatarImg", Types.VARCHAR },
			{ "detailImg", Types.VARCHAR },
			{ "detail", Types.VARCHAR },
			{ "referPrice", Types.DOUBLE },
			{ "categoryId", Types.BIGINT },
			{ "editTable", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table dishstore_Dish (dishId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dishName VARCHAR(75) null,decription VARCHAR(75) null,avatarImg VARCHAR(75) null,detailImg VARCHAR(75) null,detail VARCHAR(75) null,referPrice DOUBLE,categoryId LONG,editTable BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table dishstore_Dish";
	public static final String ORDER_BY_JPQL = " ORDER BY dish.dishName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY dishstore_Dish.dishName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.iRestads.model.Dish"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.iRestads.model.Dish"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.iRestads.model.Dish"), true);
	public static long DISHNAME_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Dish toModel(DishSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Dish model = new DishImpl();

		model.setDishId(soapModel.getDishId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDishName(soapModel.getDishName());
		model.setDecription(soapModel.getDecription());
		model.setAvatarImg(soapModel.getAvatarImg());
		model.setDetailImg(soapModel.getDetailImg());
		model.setDetail(soapModel.getDetail());
		model.setReferPrice(soapModel.getReferPrice());
		model.setCategoryId(soapModel.getCategoryId());
		model.setEditTable(soapModel.getEditTable());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Dish> toModels(DishSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Dish> models = new ArrayList<Dish>(soapModels.length);

		for (DishSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.iRestads.model.Dish"));

	public DishModelImpl() {
	}

	public long getPrimaryKey() {
		return _dishId;
	}

	public void setPrimaryKey(long primaryKey) {
		setDishId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_dishId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Dish.class;
	}

	public String getModelClassName() {
		return Dish.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dishId", getDishId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dishName", getDishName());
		attributes.put("decription", getDecription());
		attributes.put("avatarImg", getAvatarImg());
		attributes.put("detailImg", getDetailImg());
		attributes.put("detail", getDetail());
		attributes.put("referPrice", getReferPrice());
		attributes.put("categoryId", getCategoryId());
		attributes.put("editTable", getEditTable());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dishId = (Long)attributes.get("dishId");

		if (dishId != null) {
			setDishId(dishId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String dishName = (String)attributes.get("dishName");

		if (dishName != null) {
			setDishName(dishName);
		}

		String decription = (String)attributes.get("decription");

		if (decription != null) {
			setDecription(decription);
		}

		String avatarImg = (String)attributes.get("avatarImg");

		if (avatarImg != null) {
			setAvatarImg(avatarImg);
		}

		String detailImg = (String)attributes.get("detailImg");

		if (detailImg != null) {
			setDetailImg(detailImg);
		}

		String detail = (String)attributes.get("detail");

		if (detail != null) {
			setDetail(detail);
		}

		Double referPrice = (Double)attributes.get("referPrice");

		if (referPrice != null) {
			setReferPrice(referPrice);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Boolean editTable = (Boolean)attributes.get("editTable");

		if (editTable != null) {
			setEditTable(editTable);
		}
	}

	@JSON
	public long getDishId() {
		return _dishId;
	}

	public void setDishId(long dishId) {
		_dishId = dishId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getDishName() {
		if (_dishName == null) {
			return StringPool.BLANK;
		}
		else {
			return _dishName;
		}
	}

	public void setDishName(String dishName) {
		_columnBitmask = -1L;

		if (_originalDishName == null) {
			_originalDishName = _dishName;
		}

		_dishName = dishName;
	}

	public String getOriginalDishName() {
		return GetterUtil.getString(_originalDishName);
	}

	@JSON
	public String getDecription() {
		if (_decription == null) {
			return StringPool.BLANK;
		}
		else {
			return _decription;
		}
	}

	public void setDecription(String decription) {
		_decription = decription;
	}

	@JSON
	public String getAvatarImg() {
		if (_avatarImg == null) {
			return StringPool.BLANK;
		}
		else {
			return _avatarImg;
		}
	}

	public void setAvatarImg(String avatarImg) {
		_avatarImg = avatarImg;
	}

	@JSON
	public String getDetailImg() {
		if (_detailImg == null) {
			return StringPool.BLANK;
		}
		else {
			return _detailImg;
		}
	}

	public void setDetailImg(String detailImg) {
		_detailImg = detailImg;
	}

	@JSON
	public String getDetail() {
		if (_detail == null) {
			return StringPool.BLANK;
		}
		else {
			return _detail;
		}
	}

	public void setDetail(String detail) {
		_detail = detail;
	}

	@JSON
	public double getReferPrice() {
		return _referPrice;
	}

	public void setReferPrice(double referPrice) {
		_referPrice = referPrice;
	}

	@JSON
	public long getCategoryId() {
		return _categoryId;
	}

	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	@JSON
	public boolean getEditTable() {
		return _editTable;
	}

	public boolean isEditTable() {
		return _editTable;
	}

	public void setEditTable(boolean editTable) {
		_editTable = editTable;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Dish.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dish toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Dish)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		DishImpl dishImpl = new DishImpl();

		dishImpl.setDishId(getDishId());
		dishImpl.setCompanyId(getCompanyId());
		dishImpl.setUserId(getUserId());
		dishImpl.setUserName(getUserName());
		dishImpl.setCreateDate(getCreateDate());
		dishImpl.setModifiedDate(getModifiedDate());
		dishImpl.setDishName(getDishName());
		dishImpl.setDecription(getDecription());
		dishImpl.setAvatarImg(getAvatarImg());
		dishImpl.setDetailImg(getDetailImg());
		dishImpl.setDetail(getDetail());
		dishImpl.setReferPrice(getReferPrice());
		dishImpl.setCategoryId(getCategoryId());
		dishImpl.setEditTable(getEditTable());

		dishImpl.resetOriginalValues();

		return dishImpl;
	}

	public int compareTo(Dish dish) {
		int value = 0;

		value = getDishName().compareTo(dish.getDishName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Dish dish = null;

		try {
			dish = (Dish)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = dish.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DishModelImpl dishModelImpl = this;

		dishModelImpl._originalDishName = dishModelImpl._dishName;

		dishModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Dish> toCacheModel() {
		DishCacheModel dishCacheModel = new DishCacheModel();

		dishCacheModel.dishId = getDishId();

		dishCacheModel.companyId = getCompanyId();

		dishCacheModel.userId = getUserId();

		dishCacheModel.userName = getUserName();

		String userName = dishCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dishCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dishCacheModel.createDate = createDate.getTime();
		}
		else {
			dishCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dishCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dishCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dishCacheModel.dishName = getDishName();

		String dishName = dishCacheModel.dishName;

		if ((dishName != null) && (dishName.length() == 0)) {
			dishCacheModel.dishName = null;
		}

		dishCacheModel.decription = getDecription();

		String decription = dishCacheModel.decription;

		if ((decription != null) && (decription.length() == 0)) {
			dishCacheModel.decription = null;
		}

		dishCacheModel.avatarImg = getAvatarImg();

		String avatarImg = dishCacheModel.avatarImg;

		if ((avatarImg != null) && (avatarImg.length() == 0)) {
			dishCacheModel.avatarImg = null;
		}

		dishCacheModel.detailImg = getDetailImg();

		String detailImg = dishCacheModel.detailImg;

		if ((detailImg != null) && (detailImg.length() == 0)) {
			dishCacheModel.detailImg = null;
		}

		dishCacheModel.detail = getDetail();

		String detail = dishCacheModel.detail;

		if ((detail != null) && (detail.length() == 0)) {
			dishCacheModel.detail = null;
		}

		dishCacheModel.referPrice = getReferPrice();

		dishCacheModel.categoryId = getCategoryId();

		dishCacheModel.editTable = getEditTable();

		return dishCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{dishId=");
		sb.append(getDishId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dishName=");
		sb.append(getDishName());
		sb.append(", decription=");
		sb.append(getDecription());
		sb.append(", avatarImg=");
		sb.append(getAvatarImg());
		sb.append(", detailImg=");
		sb.append(getDetailImg());
		sb.append(", detail=");
		sb.append(getDetail());
		sb.append(", referPrice=");
		sb.append(getReferPrice());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", editTable=");
		sb.append(getEditTable());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("iRestads.model.Dish");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dishId</column-name><column-value><![CDATA[");
		sb.append(getDishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dishName</column-name><column-value><![CDATA[");
		sb.append(getDishName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>decription</column-name><column-value><![CDATA[");
		sb.append(getDecription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>avatarImg</column-name><column-value><![CDATA[");
		sb.append(getAvatarImg());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detailImg</column-name><column-value><![CDATA[");
		sb.append(getDetailImg());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detail</column-name><column-value><![CDATA[");
		sb.append(getDetail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referPrice</column-name><column-value><![CDATA[");
		sb.append(getReferPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editTable</column-name><column-value><![CDATA[");
		sb.append(getEditTable());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Dish.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Dish.class
		};
	private long _dishId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _dishName;
	private String _originalDishName;
	private String _decription;
	private String _avatarImg;
	private String _detailImg;
	private String _detail;
	private double _referPrice;
	private long _categoryId;
	private boolean _editTable;
	private long _columnBitmask;
	private Dish _escapedModelProxy;
}