package irestads.beans.dishs_store;

import irestads.defination.Base64;
import irestads.defination.UploadUtils;
import irestads.model.Category;
import irestads.model.Dish;

import irestads.service.CategoryServiceUtil;
import irestads.service.DishLocalServiceUtil;
import irestads.service.DishServiceUtil;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;

import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.RowEditEvent;

public class DishBeans {
	private List<Dish> dishs;
	private Dish dishSelected;
	private Dish dishSearch;
	private Dish dishAdd;
	private String searchType;
	private String keyWords;
	private String base64ImgAvatar;

	public String getBase64ImgAvatar() {
		return base64ImgAvatar;
	}

	public void uploadAvatarImg(FileUploadEvent event)
			throws InterruptedException {
		String base64ImgAvatar = UploadUtils.handleFileUpload(event);
		dishAdd.setAvatarBaseCode(base64ImgAvatar);
		dishAdd.setAvatarImg(event.getFile().getFileName());
	}

	public void uploadDetailImg(FileUploadEvent event)
			throws InterruptedException {
		String base64ImgDetail = UploadUtils.handleFileUpload(event);
		dishAdd.setDetailBaseCode(base64ImgDetail);
		dishAdd.setDetailImg(event.getFile().getFileName());
	}

	public void setBase64ImgAvatar(String base64ImgAvatar) {
		this.base64ImgAvatar = base64ImgAvatar;
	}

	public void handleFileUpload(FileUploadEvent event)
			throws InterruptedException {

		this.base64ImgAvatar = UploadUtils.handleFileUpload(event);

	}

	// Generated by Map search types
	private Map<String, Object> searchTypesValue;
	{
		searchTypesValue = new LinkedHashMap<String, Object>();
		searchTypesValue.put("Tất cả", -1); // label, value
		searchTypesValue.put("Mã món ăn", 1); // label, value
		searchTypesValue.put("Tên món ăn", 2); // label, value
		searchTypesValue.put("Mô Tả", 3); // label, value
		searchTypesValue.put("Ảnh đại diện", 4); // label, value
		searchTypesValue.put("Ảnh chi tiết", 5); // label, value
		searchTypesValue.put("Chi tiết", 6); // label, value
		searchTypesValue.put("Giá ", 7); // label, value
		searchTypesValue.put("Loại", 8); // label, value
	}

	public DishBeans() {
		// dishSearch=DishLocalServiceUtil.createDish(0);
		dishAdd = DishLocalServiceUtil.createDish(0);
		this.dishs = new ArrayList<Dish>();
		this.dishs = this.getDishsFromDB();
		// this.findDishsByName();
		// this.search();

		// TODO Auto-generated constructor stub
	}

	public void onEdit(RowEditEvent event) {
		try {
			Dish dish = (Dish) event.getObject();
			System.out.println("Update dish "+dish.getDishName());
			dish = DishServiceUtil.updateDish(dish);
			String message = "Không thể thực hiện thay đổi thông tin món ăn";
			if (dish != null) {
				message = "Đã thay đổi thông tin món ăn thành công";
				this.getDishsFromDB();
			}
			FacesMessage msg = new FacesMessage(message, dish.getDishId()
					+ " : " + dish.getDishName());
			FacesContext.getCurrentInstance().addMessage(null, msg);

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

	}

	public List<Dish> getDishsFromDB() {
		List<Dish> dishs= DishServiceUtil.getAllDishs();
		//System.out.println("get dishs ------------------" + dishs.size());
		return dishs;

	}

	public String addDish() {
		// RequestContext context = RequestContext.getCurrentInstance();
		System.out.println("add");
		FacesMessage fmsg = null;
		boolean result = false;
		String msg;

		Dish d = DishServiceUtil.createDish(dishAdd.getDishName(),
				dishAdd.getDecription(), dishAdd.getAvatarImg(),
				dishAdd.getDetailImg(), dishAdd.getDetail(),
				dishAdd.getReferPrice(), dishAdd.getAvatarBaseCode(),
				dishAdd.getDetailBaseCode(), dishAdd.getCategoryId());

		if (d != null) {
			msg = "Thêm món ăn thành công ";
			fmsg = new FacesMessage(FacesMessage.SEVERITY_INFO, msg, "Mã: "
					+ d.getDishId() + " Tên: " + d.getDishName());
			result = true;
		} else {
			msg = "Thêm món ăn không thành công ";
			fmsg = new FacesMessage(FacesMessage.SEVERITY_WARN, msg,
					"Kiểm tra Lỗi");
			result = false;
		}

		FacesContext.getCurrentInstance().addMessage(null, fmsg);
		// context.addCallbackParam("result", result);
		this.dishs = this.getDishsFromDB();
		return "index.html";
	}

	public String changeAddPage() {
		return "add_dish.xhtml";
	}

	public void deleteDish() {
		boolean check = DishServiceUtil.isDeleteDish(dishSelected.getDishId());
		String message = "Không thể thực hiện xóa Món ăn";
		if (check == true) {

			Dish dish = DishServiceUtil.deleteDish(dishSelected);

			if (dish != null) {
				message = "Đã xóa Món ăn thành công";
				this.dishs = this.getDishsFromDB();
				FacesMessage msg = new FacesMessage(message, dish.getDishId()
						+ " : " + dish.getDishName());
			}
		} else {
			message = "Món ăn không thể xóa do còn sử dụng ở chức năng khác. ";
		}
		FacesMessage msg = new FacesMessage(message);
		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	public void onCancel(RowEditEvent event) {
		FacesMessage msg = new FacesMessage("Xóa Món ăn",
				((Dish) event.getObject()).getDishName());

		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	public String search() {
		System.out.println("ST:  " + searchType + " kw : " + keyWords);
		switch (Integer.parseInt(searchType)) {
		case -1:
			this.dishs = getDishsFromDB();
			break;
		case 1:
			Dish d = DishServiceUtil.findDishsById(Long.parseLong(keyWords)); // ma
																				// mon
																				// na
			this.dishs.clear();
			this.dishs.add(d);
			break;
		case 2:
			this.dishs = DishServiceUtil.findDishsByName(keyWords);

			break;
		case 3:
			this.dishs = DishServiceUtil.findDishsByDecription(keyWords);

			break;
		case 4:
			this.dishs = DishServiceUtil.findDishsByAvatarImg(keyWords);

			break;
		case 5:
			this.dishs = DishServiceUtil.findDishsByDetailImg(keyWords);

			break;
		case 6:
			this.dishs = DishServiceUtil.findDishsByDetail(keyWords);

			break;
		case 7:
			this.dishs = DishServiceUtil.findDishsByReferPrice(Integer
					.parseInt(keyWords));

			break;
		case 8:
			this.dishs = DishServiceUtil.findDishsByCategoryName(keyWords);

			break;

		// default:this.dishs= getDishsFromDB();
		// break;
		}

		System.out.println("list dish " + dishs.size());
		return null;
	}

	public String searchSomeField() {
		System.out.println("search " + dishSearch.getDishName());
		this.dishs = DishServiceUtil.findDishsBySomeField(
				dishSearch.getDishId(), dishSearch.getReferPrice(),
				dishSearch.getDishName(), dishSearch.getDecription(),
				dishSearch.getAvatarImg(), dishSearch.getDetailImg(),
				dishSearch.getDetail());
		return null;
	}

	public String getSearchType() {
		return searchType;
	}

	public void setSearchType(String searchType) {
		this.searchType = searchType;
	}

	public String getKeyWords() {
		return keyWords;
	}

	public void setKeyWords(String keyWords) {
		this.keyWords = keyWords;
	}

	public Map<String, Object> getSearchTypesValue() {
		return searchTypesValue;
	}

	public void setSearchTypesValue(Map<String, Object> searchTypesValue) {
		this.searchTypesValue = searchTypesValue;
	}

	public List<Dish> getDishs() {
		System.out.println("geter Dishs " + this.dishs.size());
	//	this.getDishsFromDB();
		return dishs;
	}

	public void setDishs(List<Dish> dishs) {

		this.dishs = dishs;
	}

	public Dish getDishSelected() {
		return dishSelected;
	}

	public void setDishSelected(Dish dishSelected) {
		this.dishSelected = dishSelected;
	}

	public Dish getDishSearch() {
		return dishSearch;
	}

	public void setDishSearch(Dish dishSearch) {
		this.dishSearch = dishSearch;
	}

	public Dish getDishAdd() {
		return dishAdd;
	}

	public void setDishAdd(Dish dishAdd) {
		this.dishAdd = dishAdd;
	}

}
