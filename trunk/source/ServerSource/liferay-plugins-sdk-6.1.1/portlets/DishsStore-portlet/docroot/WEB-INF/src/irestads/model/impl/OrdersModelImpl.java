/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package irestads.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import irestads.model.Orders;
import irestads.model.OrdersModel;
import irestads.model.OrdersSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Orders service. Represents a row in the &quot;dishsstore_Orders&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link irestads.model.OrdersModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrdersImpl}.
 * </p>
 *
 * @author Be
 * @see OrdersImpl
 * @see irestads.model.Orders
 * @see irestads.model.OrdersModel
 * @generated
 */
@JSON(strict = true)
public class OrdersModelImpl extends BaseModelImpl<Orders>
	implements OrdersModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a orders model instance should use the {@link irestads.model.Orders} interface instead.
	 */
	public static final String TABLE_NAME = "dishsstore_Orders";
	public static final Object[][] TABLE_COLUMNS = {
			{ "orderId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "charge", Types.INTEGER },
			{ "createdDate", Types.TIMESTAMP },
			{ "isPayMent", Types.BOOLEAN },
			{ "numOfDinner", Types.INTEGER },
			{ "dishTableId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table dishsstore_Orders (orderId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,charge INTEGER,createdDate DATE null,isPayMent BOOLEAN,numOfDinner INTEGER,dishTableId LONG)";
	public static final String TABLE_SQL_DROP = "drop table dishsstore_Orders";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.irestads.model.Orders"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.irestads.model.Orders"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.irestads.model.Orders"),
			true);
	public static long ISPAYMENT_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Orders toModel(OrdersSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Orders model = new OrdersImpl();

		model.setOrderId(soapModel.getOrderId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCharge(soapModel.getCharge());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setIsPayMent(soapModel.getIsPayMent());
		model.setNumOfDinner(soapModel.getNumOfDinner());
		model.setDishTableId(soapModel.getDishTableId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Orders> toModels(OrdersSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Orders> models = new ArrayList<Orders>(soapModels.length);

		for (OrdersSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.irestads.model.Orders"));

	public OrdersModelImpl() {
	}

	public long getPrimaryKey() {
		return _orderId;
	}

	public void setPrimaryKey(long primaryKey) {
		setOrderId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_orderId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Orders.class;
	}

	public String getModelClassName() {
		return Orders.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("orderId", getOrderId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("charge", getCharge());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("isPayMent", getIsPayMent());
		attributes.put("numOfDinner", getNumOfDinner());
		attributes.put("dishTableId", getDishTableId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long orderId = (Long)attributes.get("orderId");

		if (orderId != null) {
			setOrderId(orderId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer charge = (Integer)attributes.get("charge");

		if (charge != null) {
			setCharge(charge);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Boolean isPayMent = (Boolean)attributes.get("isPayMent");

		if (isPayMent != null) {
			setIsPayMent(isPayMent);
		}

		Integer numOfDinner = (Integer)attributes.get("numOfDinner");

		if (numOfDinner != null) {
			setNumOfDinner(numOfDinner);
		}

		Long dishTableId = (Long)attributes.get("dishTableId");

		if (dishTableId != null) {
			setDishTableId(dishTableId);
		}
	}

	@JSON
	public long getOrderId() {
		return _orderId;
	}

	public void setOrderId(long orderId) {
		_orderId = orderId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public int getCharge() {
		return _charge;
	}

	public void setCharge(int charge) {
		_charge = charge;
	}

	@JSON
	public Date getCreatedDate() {
		return _createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	public boolean getIsPayMent() {
		return _isPayMent;
	}

	public boolean isIsPayMent() {
		return _isPayMent;
	}

	public void setIsPayMent(boolean isPayMent) {
		_columnBitmask |= ISPAYMENT_COLUMN_BITMASK;

		if (!_setOriginalIsPayMent) {
			_setOriginalIsPayMent = true;

			_originalIsPayMent = _isPayMent;
		}

		_isPayMent = isPayMent;
	}

	public boolean getOriginalIsPayMent() {
		return _originalIsPayMent;
	}

	@JSON
	public int getNumOfDinner() {
		return _numOfDinner;
	}

	public void setNumOfDinner(int numOfDinner) {
		_numOfDinner = numOfDinner;
	}

	@JSON
	public long getDishTableId() {
		return _dishTableId;
	}

	public void setDishTableId(long dishTableId) {
		_dishTableId = dishTableId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Orders.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Orders toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Orders)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		OrdersImpl ordersImpl = new OrdersImpl();

		ordersImpl.setOrderId(getOrderId());
		ordersImpl.setCompanyId(getCompanyId());
		ordersImpl.setUserId(getUserId());
		ordersImpl.setUserName(getUserName());
		ordersImpl.setCreateDate(getCreateDate());
		ordersImpl.setModifiedDate(getModifiedDate());
		ordersImpl.setCharge(getCharge());
		ordersImpl.setCreatedDate(getCreatedDate());
		ordersImpl.setIsPayMent(getIsPayMent());
		ordersImpl.setNumOfDinner(getNumOfDinner());
		ordersImpl.setDishTableId(getDishTableId());

		ordersImpl.resetOriginalValues();

		return ordersImpl;
	}

	public int compareTo(Orders orders) {
		long primaryKey = orders.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Orders orders = null;

		try {
			orders = (Orders)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = orders.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OrdersModelImpl ordersModelImpl = this;

		ordersModelImpl._originalIsPayMent = ordersModelImpl._isPayMent;

		ordersModelImpl._setOriginalIsPayMent = false;

		ordersModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Orders> toCacheModel() {
		OrdersCacheModel ordersCacheModel = new OrdersCacheModel();

		ordersCacheModel.orderId = getOrderId();

		ordersCacheModel.companyId = getCompanyId();

		ordersCacheModel.userId = getUserId();

		ordersCacheModel.userName = getUserName();

		String userName = ordersCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ordersCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ordersCacheModel.createDate = createDate.getTime();
		}
		else {
			ordersCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ordersCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ordersCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ordersCacheModel.charge = getCharge();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			ordersCacheModel.createdDate = createdDate.getTime();
		}
		else {
			ordersCacheModel.createdDate = Long.MIN_VALUE;
		}

		ordersCacheModel.isPayMent = getIsPayMent();

		ordersCacheModel.numOfDinner = getNumOfDinner();

		ordersCacheModel.dishTableId = getDishTableId();

		return ordersCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{orderId=");
		sb.append(getOrderId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", charge=");
		sb.append(getCharge());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", isPayMent=");
		sb.append(getIsPayMent());
		sb.append(", numOfDinner=");
		sb.append(getNumOfDinner());
		sb.append(", dishTableId=");
		sb.append(getDishTableId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("irestads.model.Orders");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>orderId</column-name><column-value><![CDATA[");
		sb.append(getOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>charge</column-name><column-value><![CDATA[");
		sb.append(getCharge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isPayMent</column-name><column-value><![CDATA[");
		sb.append(getIsPayMent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numOfDinner</column-name><column-value><![CDATA[");
		sb.append(getNumOfDinner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dishTableId</column-name><column-value><![CDATA[");
		sb.append(getDishTableId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Orders.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Orders.class
		};
	private long _orderId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _charge;
	private Date _createdDate;
	private boolean _isPayMent;
	private boolean _originalIsPayMent;
	private boolean _setOriginalIsPayMent;
	private int _numOfDinner;
	private long _dishTableId;
	private long _columnBitmask;
	private Orders _escapedModelProxy;
}