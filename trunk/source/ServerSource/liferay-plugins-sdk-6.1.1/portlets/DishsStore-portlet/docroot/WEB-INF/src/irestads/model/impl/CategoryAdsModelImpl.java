/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package irestads.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import irestads.model.CategoryAds;
import irestads.model.CategoryAdsModel;
import irestads.model.CategoryAdsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CategoryAds service. Represents a row in the &quot;dishsstore_CategoryAds&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link irestads.model.CategoryAdsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CategoryAdsImpl}.
 * </p>
 *
 * @author Be
 * @see CategoryAdsImpl
 * @see irestads.model.CategoryAds
 * @see irestads.model.CategoryAdsModel
 * @generated
 */
@JSON(strict = true)
public class CategoryAdsModelImpl extends BaseModelImpl<CategoryAds>
	implements CategoryAdsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a category ads model instance should use the {@link irestads.model.CategoryAds} interface instead.
	 */
	public static final String TABLE_NAME = "dishsstore_CategoryAds";
	public static final Object[][] TABLE_COLUMNS = {
			{ "categoryAdsId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "categoryAdsName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table dishsstore_CategoryAds (categoryAdsId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,categoryAdsName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table dishsstore_CategoryAds";
	public static final String ORDER_BY_JPQL = " ORDER BY categoryAds.categoryAdsName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY dishsstore_CategoryAds.categoryAdsName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.irestads.model.CategoryAds"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.irestads.model.CategoryAds"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.irestads.model.CategoryAds"),
			true);
	public static long CATEGORYADSNAME_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CategoryAds toModel(CategoryAdsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CategoryAds model = new CategoryAdsImpl();

		model.setCategoryAdsId(soapModel.getCategoryAdsId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCategoryAdsName(soapModel.getCategoryAdsName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CategoryAds> toModels(CategoryAdsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CategoryAds> models = new ArrayList<CategoryAds>(soapModels.length);

		for (CategoryAdsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.irestads.model.CategoryAds"));

	public CategoryAdsModelImpl() {
	}

	public long getPrimaryKey() {
		return _categoryAdsId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCategoryAdsId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_categoryAdsId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CategoryAds.class;
	}

	public String getModelClassName() {
		return CategoryAds.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("categoryAdsId", getCategoryAdsId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("categoryAdsName", getCategoryAdsName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long categoryAdsId = (Long)attributes.get("categoryAdsId");

		if (categoryAdsId != null) {
			setCategoryAdsId(categoryAdsId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String categoryAdsName = (String)attributes.get("categoryAdsName");

		if (categoryAdsName != null) {
			setCategoryAdsName(categoryAdsName);
		}
	}

	@JSON
	public long getCategoryAdsId() {
		return _categoryAdsId;
	}

	public void setCategoryAdsId(long categoryAdsId) {
		_categoryAdsId = categoryAdsId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getCategoryAdsName() {
		if (_categoryAdsName == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryAdsName;
		}
	}

	public void setCategoryAdsName(String categoryAdsName) {
		_columnBitmask = -1L;

		if (_originalCategoryAdsName == null) {
			_originalCategoryAdsName = _categoryAdsName;
		}

		_categoryAdsName = categoryAdsName;
	}

	public String getOriginalCategoryAdsName() {
		return GetterUtil.getString(_originalCategoryAdsName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CategoryAds.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CategoryAds toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CategoryAds)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CategoryAdsImpl categoryAdsImpl = new CategoryAdsImpl();

		categoryAdsImpl.setCategoryAdsId(getCategoryAdsId());
		categoryAdsImpl.setCompanyId(getCompanyId());
		categoryAdsImpl.setUserId(getUserId());
		categoryAdsImpl.setUserName(getUserName());
		categoryAdsImpl.setCreateDate(getCreateDate());
		categoryAdsImpl.setModifiedDate(getModifiedDate());
		categoryAdsImpl.setCategoryAdsName(getCategoryAdsName());

		categoryAdsImpl.resetOriginalValues();

		return categoryAdsImpl;
	}

	public int compareTo(CategoryAds categoryAds) {
		int value = 0;

		value = getCategoryAdsName().compareTo(categoryAds.getCategoryAdsName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CategoryAds categoryAds = null;

		try {
			categoryAds = (CategoryAds)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = categoryAds.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CategoryAdsModelImpl categoryAdsModelImpl = this;

		categoryAdsModelImpl._originalCategoryAdsName = categoryAdsModelImpl._categoryAdsName;

		categoryAdsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CategoryAds> toCacheModel() {
		CategoryAdsCacheModel categoryAdsCacheModel = new CategoryAdsCacheModel();

		categoryAdsCacheModel.categoryAdsId = getCategoryAdsId();

		categoryAdsCacheModel.companyId = getCompanyId();

		categoryAdsCacheModel.userId = getUserId();

		categoryAdsCacheModel.userName = getUserName();

		String userName = categoryAdsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			categoryAdsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			categoryAdsCacheModel.createDate = createDate.getTime();
		}
		else {
			categoryAdsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			categoryAdsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			categoryAdsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		categoryAdsCacheModel.categoryAdsName = getCategoryAdsName();

		String categoryAdsName = categoryAdsCacheModel.categoryAdsName;

		if ((categoryAdsName != null) && (categoryAdsName.length() == 0)) {
			categoryAdsCacheModel.categoryAdsName = null;
		}

		return categoryAdsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{categoryAdsId=");
		sb.append(getCategoryAdsId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", categoryAdsName=");
		sb.append(getCategoryAdsName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("irestads.model.CategoryAds");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>categoryAdsId</column-name><column-value><![CDATA[");
		sb.append(getCategoryAdsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryAdsName</column-name><column-value><![CDATA[");
		sb.append(getCategoryAdsName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CategoryAds.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CategoryAds.class
		};
	private long _categoryAdsId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _categoryAdsName;
	private String _originalCategoryAdsName;
	private long _columnBitmask;
	private CategoryAds _escapedModelProxy;
}