/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package irestads.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import irestads.model.AdsItem;
import irestads.model.AdsItemModel;
import irestads.model.AdsItemSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AdsItem service. Represents a row in the &quot;dishsstore_AdsItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link irestads.model.AdsItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdsItemImpl}.
 * </p>
 *
 * @author Be
 * @see AdsItemImpl
 * @see irestads.model.AdsItem
 * @see irestads.model.AdsItemModel
 * @generated
 */
@JSON(strict = true)
public class AdsItemModelImpl extends BaseModelImpl<AdsItem>
	implements AdsItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ads item model instance should use the {@link irestads.model.AdsItem} interface instead.
	 */
	public static final String TABLE_NAME = "dishsstore_AdsItem";
	public static final Object[][] TABLE_COLUMNS = {
			{ "adsItemId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "companyName", Types.VARCHAR },
			{ "productName", Types.VARCHAR },
			{ "numberPhone", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "facebook", Types.VARCHAR },
			{ "twitter", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "imageContent", Types.CLOB },
			{ "timeDuring", Types.INTEGER },
			{ "tags", Types.VARCHAR },
			{ "itemType", Types.VARCHAR },
			{ "categoryAdsId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table dishsstore_AdsItem (adsItemId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,companyName VARCHAR(75) null,productName VARCHAR(75) null,numberPhone VARCHAR(75) null,email VARCHAR(75) null,address VARCHAR(75) null,facebook VARCHAR(75) null,twitter VARCHAR(75) null,description VARCHAR(75) null,imageContent TEXT null,timeDuring INTEGER,tags VARCHAR(75) null,itemType VARCHAR(75) null,categoryAdsId LONG)";
	public static final String TABLE_SQL_DROP = "drop table dishsstore_AdsItem";
	public static final String ORDER_BY_JPQL = " ORDER BY adsItem.productName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY dishsstore_AdsItem.productName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.irestads.model.AdsItem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.irestads.model.AdsItem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.irestads.model.AdsItem"),
			true);
	public static long PRODUCTNAME_COLUMN_BITMASK = 1L;
	public static long TIMEDURING_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AdsItem toModel(AdsItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AdsItem model = new AdsItemImpl();

		model.setAdsItemId(soapModel.getAdsItemId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCompanyName(soapModel.getCompanyName());
		model.setProductName(soapModel.getProductName());
		model.setNumberPhone(soapModel.getNumberPhone());
		model.setEmail(soapModel.getEmail());
		model.setAddress(soapModel.getAddress());
		model.setFacebook(soapModel.getFacebook());
		model.setTwitter(soapModel.getTwitter());
		model.setDescription(soapModel.getDescription());
		model.setImageContent(soapModel.getImageContent());
		model.setTimeDuring(soapModel.getTimeDuring());
		model.setTags(soapModel.getTags());
		model.setItemType(soapModel.getItemType());
		model.setCategoryAdsId(soapModel.getCategoryAdsId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AdsItem> toModels(AdsItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AdsItem> models = new ArrayList<AdsItem>(soapModels.length);

		for (AdsItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.irestads.model.AdsItem"));

	public AdsItemModelImpl() {
	}

	public long getPrimaryKey() {
		return _adsItemId;
	}

	public void setPrimaryKey(long primaryKey) {
		setAdsItemId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_adsItemId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AdsItem.class;
	}

	public String getModelClassName() {
		return AdsItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("adsItemId", getAdsItemId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("companyName", getCompanyName());
		attributes.put("productName", getProductName());
		attributes.put("numberPhone", getNumberPhone());
		attributes.put("email", getEmail());
		attributes.put("address", getAddress());
		attributes.put("facebook", getFacebook());
		attributes.put("twitter", getTwitter());
		attributes.put("description", getDescription());
		attributes.put("imageContent", getImageContent());
		attributes.put("timeDuring", getTimeDuring());
		attributes.put("tags", getTags());
		attributes.put("itemType", getItemType());
		attributes.put("categoryAdsId", getCategoryAdsId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long adsItemId = (Long)attributes.get("adsItemId");

		if (adsItemId != null) {
			setAdsItemId(adsItemId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		String productName = (String)attributes.get("productName");

		if (productName != null) {
			setProductName(productName);
		}

		String numberPhone = (String)attributes.get("numberPhone");

		if (numberPhone != null) {
			setNumberPhone(numberPhone);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String facebook = (String)attributes.get("facebook");

		if (facebook != null) {
			setFacebook(facebook);
		}

		String twitter = (String)attributes.get("twitter");

		if (twitter != null) {
			setTwitter(twitter);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String imageContent = (String)attributes.get("imageContent");

		if (imageContent != null) {
			setImageContent(imageContent);
		}

		Integer timeDuring = (Integer)attributes.get("timeDuring");

		if (timeDuring != null) {
			setTimeDuring(timeDuring);
		}

		String tags = (String)attributes.get("tags");

		if (tags != null) {
			setTags(tags);
		}

		String itemType = (String)attributes.get("itemType");

		if (itemType != null) {
			setItemType(itemType);
		}

		Long categoryAdsId = (Long)attributes.get("categoryAdsId");

		if (categoryAdsId != null) {
			setCategoryAdsId(categoryAdsId);
		}
	}

	@JSON
	public long getAdsItemId() {
		return _adsItemId;
	}

	public void setAdsItemId(long adsItemId) {
		_adsItemId = adsItemId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@JSON
	public String getProductName() {
		if (_productName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productName;
		}
	}

	public void setProductName(String productName) {
		_columnBitmask = -1L;

		if (_originalProductName == null) {
			_originalProductName = _productName;
		}

		_productName = productName;
	}

	public String getOriginalProductName() {
		return GetterUtil.getString(_originalProductName);
	}

	@JSON
	public String getNumberPhone() {
		if (_numberPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberPhone;
		}
	}

	public void setNumberPhone(String numberPhone) {
		_numberPhone = numberPhone;
	}

	@JSON
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	public String getFacebook() {
		if (_facebook == null) {
			return StringPool.BLANK;
		}
		else {
			return _facebook;
		}
	}

	public void setFacebook(String facebook) {
		_facebook = facebook;
	}

	@JSON
	public String getTwitter() {
		if (_twitter == null) {
			return StringPool.BLANK;
		}
		else {
			return _twitter;
		}
	}

	public void setTwitter(String twitter) {
		_twitter = twitter;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public String getImageContent() {
		if (_imageContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageContent;
		}
	}

	public void setImageContent(String imageContent) {
		_imageContent = imageContent;
	}

	@JSON
	public int getTimeDuring() {
		return _timeDuring;
	}

	public void setTimeDuring(int timeDuring) {
		_columnBitmask |= TIMEDURING_COLUMN_BITMASK;

		if (!_setOriginalTimeDuring) {
			_setOriginalTimeDuring = true;

			_originalTimeDuring = _timeDuring;
		}

		_timeDuring = timeDuring;
	}

	public int getOriginalTimeDuring() {
		return _originalTimeDuring;
	}

	@JSON
	public String getTags() {
		if (_tags == null) {
			return StringPool.BLANK;
		}
		else {
			return _tags;
		}
	}

	public void setTags(String tags) {
		_tags = tags;
	}

	@JSON
	public String getItemType() {
		if (_itemType == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemType;
		}
	}

	public void setItemType(String itemType) {
		_itemType = itemType;
	}

	@JSON
	public long getCategoryAdsId() {
		return _categoryAdsId;
	}

	public void setCategoryAdsId(long categoryAdsId) {
		_categoryAdsId = categoryAdsId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AdsItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdsItem toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AdsItem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AdsItemImpl adsItemImpl = new AdsItemImpl();

		adsItemImpl.setAdsItemId(getAdsItemId());
		adsItemImpl.setCompanyId(getCompanyId());
		adsItemImpl.setUserId(getUserId());
		adsItemImpl.setUserName(getUserName());
		adsItemImpl.setCreateDate(getCreateDate());
		adsItemImpl.setModifiedDate(getModifiedDate());
		adsItemImpl.setCompanyName(getCompanyName());
		adsItemImpl.setProductName(getProductName());
		adsItemImpl.setNumberPhone(getNumberPhone());
		adsItemImpl.setEmail(getEmail());
		adsItemImpl.setAddress(getAddress());
		adsItemImpl.setFacebook(getFacebook());
		adsItemImpl.setTwitter(getTwitter());
		adsItemImpl.setDescription(getDescription());
		adsItemImpl.setImageContent(getImageContent());
		adsItemImpl.setTimeDuring(getTimeDuring());
		adsItemImpl.setTags(getTags());
		adsItemImpl.setItemType(getItemType());
		adsItemImpl.setCategoryAdsId(getCategoryAdsId());

		adsItemImpl.resetOriginalValues();

		return adsItemImpl;
	}

	public int compareTo(AdsItem adsItem) {
		int value = 0;

		value = getProductName().compareTo(adsItem.getProductName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AdsItem adsItem = null;

		try {
			adsItem = (AdsItem)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = adsItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AdsItemModelImpl adsItemModelImpl = this;

		adsItemModelImpl._originalProductName = adsItemModelImpl._productName;

		adsItemModelImpl._originalTimeDuring = adsItemModelImpl._timeDuring;

		adsItemModelImpl._setOriginalTimeDuring = false;

		adsItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdsItem> toCacheModel() {
		AdsItemCacheModel adsItemCacheModel = new AdsItemCacheModel();

		adsItemCacheModel.adsItemId = getAdsItemId();

		adsItemCacheModel.companyId = getCompanyId();

		adsItemCacheModel.userId = getUserId();

		adsItemCacheModel.userName = getUserName();

		String userName = adsItemCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			adsItemCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			adsItemCacheModel.createDate = createDate.getTime();
		}
		else {
			adsItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			adsItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			adsItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		adsItemCacheModel.companyName = getCompanyName();

		String companyName = adsItemCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			adsItemCacheModel.companyName = null;
		}

		adsItemCacheModel.productName = getProductName();

		String productName = adsItemCacheModel.productName;

		if ((productName != null) && (productName.length() == 0)) {
			adsItemCacheModel.productName = null;
		}

		adsItemCacheModel.numberPhone = getNumberPhone();

		String numberPhone = adsItemCacheModel.numberPhone;

		if ((numberPhone != null) && (numberPhone.length() == 0)) {
			adsItemCacheModel.numberPhone = null;
		}

		adsItemCacheModel.email = getEmail();

		String email = adsItemCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			adsItemCacheModel.email = null;
		}

		adsItemCacheModel.address = getAddress();

		String address = adsItemCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			adsItemCacheModel.address = null;
		}

		adsItemCacheModel.facebook = getFacebook();

		String facebook = adsItemCacheModel.facebook;

		if ((facebook != null) && (facebook.length() == 0)) {
			adsItemCacheModel.facebook = null;
		}

		adsItemCacheModel.twitter = getTwitter();

		String twitter = adsItemCacheModel.twitter;

		if ((twitter != null) && (twitter.length() == 0)) {
			adsItemCacheModel.twitter = null;
		}

		adsItemCacheModel.description = getDescription();

		String description = adsItemCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			adsItemCacheModel.description = null;
		}

		adsItemCacheModel.imageContent = getImageContent();

		String imageContent = adsItemCacheModel.imageContent;

		if ((imageContent != null) && (imageContent.length() == 0)) {
			adsItemCacheModel.imageContent = null;
		}

		adsItemCacheModel.timeDuring = getTimeDuring();

		adsItemCacheModel.tags = getTags();

		String tags = adsItemCacheModel.tags;

		if ((tags != null) && (tags.length() == 0)) {
			adsItemCacheModel.tags = null;
		}

		adsItemCacheModel.itemType = getItemType();

		String itemType = adsItemCacheModel.itemType;

		if ((itemType != null) && (itemType.length() == 0)) {
			adsItemCacheModel.itemType = null;
		}

		adsItemCacheModel.categoryAdsId = getCategoryAdsId();

		return adsItemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{adsItemId=");
		sb.append(getAdsItemId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", productName=");
		sb.append(getProductName());
		sb.append(", numberPhone=");
		sb.append(getNumberPhone());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", facebook=");
		sb.append(getFacebook());
		sb.append(", twitter=");
		sb.append(getTwitter());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", imageContent=");
		sb.append(getImageContent());
		sb.append(", timeDuring=");
		sb.append(getTimeDuring());
		sb.append(", tags=");
		sb.append(getTags());
		sb.append(", itemType=");
		sb.append(getItemType());
		sb.append(", categoryAdsId=");
		sb.append(getCategoryAdsId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("irestads.model.AdsItem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>adsItemId</column-name><column-value><![CDATA[");
		sb.append(getAdsItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productName</column-name><column-value><![CDATA[");
		sb.append(getProductName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberPhone</column-name><column-value><![CDATA[");
		sb.append(getNumberPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facebook</column-name><column-value><![CDATA[");
		sb.append(getFacebook());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>twitter</column-name><column-value><![CDATA[");
		sb.append(getTwitter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageContent</column-name><column-value><![CDATA[");
		sb.append(getImageContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeDuring</column-name><column-value><![CDATA[");
		sb.append(getTimeDuring());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tags</column-name><column-value><![CDATA[");
		sb.append(getTags());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemType</column-name><column-value><![CDATA[");
		sb.append(getItemType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryAdsId</column-name><column-value><![CDATA[");
		sb.append(getCategoryAdsId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdsItem.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AdsItem.class
		};
	private long _adsItemId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _companyName;
	private String _productName;
	private String _originalProductName;
	private String _numberPhone;
	private String _email;
	private String _address;
	private String _facebook;
	private String _twitter;
	private String _description;
	private String _imageContent;
	private int _timeDuring;
	private int _originalTimeDuring;
	private boolean _setOriginalTimeDuring;
	private String _tags;
	private String _itemType;
	private long _categoryAdsId;
	private long _columnBitmask;
	private AdsItem _escapedModelProxy;
}